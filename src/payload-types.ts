/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    pages: Page;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    'site-settings': SiteSetting;
    'color-settings': ColorSetting;
    header: Header;
    footer: Footer;
  };
  globalsSelect: {
    'site-settings': SiteSettingsSelect<false> | SiteSettingsSelect<true>;
    'color-settings': ColorSettingsSelect<false> | ColorSettingsSelect<true>;
    header: HeaderSelect<false> | HeaderSelect<true>;
    footer: FooterSelect<false> | FooterSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  prefix?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  name: string;
  slug: string;
  layout?:
    | (
        | {
            title: string;
            subtitle: string;
            id?: string | null;
            blockName?: string | null;
            blockType: 'cover';
          }
        | {
            content: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            };
            id?: string | null;
            blockName?: string | null;
            blockType: 'richText';
          }
        | {
            image: string | Media;
            caption?: string | null;
            settings?: {
              width?: ('full' | 'large' | 'medium' | 'small') | null;
              alignment?: ('left' | 'center' | 'right') | null;
              rounded?: boolean | null;
              shadow?: boolean | null;
            };
            id?: string | null;
            blockName?: string | null;
            blockType: 'image';
          }
        | {
            background?: {
              type?: ('image' | 'video') | null;
              image?: (string | null) | Media;
              video?: (string | null) | Media;
              overlay?: boolean | null;
            };
            layout?: {
              contentAlignment?: ('left' | 'center' | 'right') | null;
              verticalAlignment?: ('start' | 'center' | 'end') | null;
              contentWidth?: ('narrow' | 'medium' | 'wide') | null;
            };
            content: {
              heading: string;
              subheading?: string | null;
              buttons?:
                | {
                    label: string;
                    link: string;
                    variant?: ('primary' | 'secondary') | null;
                    id?: string | null;
                  }[]
                | null;
            };
            id?: string | null;
            blockName?: string | null;
            blockType: 'hero';
          }
        | {
            slides: {
              background?: {
                type?: ('image' | 'video') | null;
                image?: (string | null) | Media;
                video?: (string | null) | Media;
                overlay?: boolean | null;
              };
              content: {
                heading: string;
                subheading?: string | null;
                buttons?:
                  | {
                      label: string;
                      link: string;
                      variant?: ('primary' | 'secondary') | null;
                      id?: string | null;
                    }[]
                  | null;
              };
              id?: string | null;
            }[];
            settings?: {
              autoplay?: boolean | null;
              interval?: number | null;
              showArrows?: boolean | null;
              showDots?: boolean | null;
              layout?: {
                contentAlignment?: ('left' | 'center' | 'right') | null;
                contentWidth?: ('narrow' | 'medium' | 'wide') | null;
              };
            };
            id?: string | null;
            blockName?: string | null;
            blockType: 'heroCarousel';
          }
        | {
            heading?: string | null;
            description?: string | null;
            layout?: ('default' | 'compact' | 'wide') | null;
            cards?:
              | {
                  image: string | Media;
                  title: string;
                  description?: string | null;
                  link?: {
                    text?: string | null;
                    url?: string | null;
                  };
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'cardGrid';
          }
        | {
            layout?: {
              contentRatio?: ('50-50' | '60-40' | '40-60' | '70-30' | '30-70') | null;
              verticalAlignment?: ('start' | 'center' | 'end') | null;
              spacing?: ('compact' | 'medium' | 'spacious') | null;
              reverseOnMobile?: boolean | null;
            };
            leftColumn: {
              contentType: 'text' | 'media';
              text?: {
                heading?: string | null;
                content?: {
                  root: {
                    type: string;
                    children: {
                      type: string;
                      version: number;
                      [k: string]: unknown;
                    }[];
                    direction: ('ltr' | 'rtl') | null;
                    format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                    indent: number;
                    version: number;
                  };
                  [k: string]: unknown;
                } | null;
                button?: {
                  label?: string | null;
                  link?: string | null;
                  variant?: ('primary' | 'secondary') | null;
                };
              };
              media?: {
                type?: ('image' | 'video') | null;
                image?: (string | null) | Media;
                video?: (string | null) | Media;
              };
            };
            rightColumn: {
              contentType: 'text' | 'media';
              text?: {
                heading?: string | null;
                content?: {
                  root: {
                    type: string;
                    children: {
                      type: string;
                      version: number;
                      [k: string]: unknown;
                    }[];
                    direction: ('ltr' | 'rtl') | null;
                    format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                    indent: number;
                    version: number;
                  };
                  [k: string]: unknown;
                } | null;
                button?: {
                  label?: string | null;
                  link?: string | null;
                  variant?: ('primary' | 'secondary') | null;
                };
              };
              media?: {
                type?: ('image' | 'video') | null;
                image?: (string | null) | Media;
                video?: (string | null) | Media;
              };
            };
            id?: string | null;
            blockName?: string | null;
            blockType: 'twoColumn';
          }
        | {
            heading?: string | null;
            description?: string | null;
            layout?: {
              style?: ('default' | 'compact' | 'featured') | null;
              columns?: ('2' | '3' | '4') | null;
              spacing?: ('compact' | 'medium' | 'spacious') | null;
            };
            plans?:
              | {
                  name: string;
                  featured?: boolean | null;
                  price: {
                    amount: number;
                    currency?: ('USD' | 'EUR' | 'GBP') | null;
                    period?: ('monthly' | 'yearly' | 'once') | null;
                  };
                  description?: string | null;
                  features?:
                    | {
                        text: string;
                        included?: boolean | null;
                        id?: string | null;
                      }[]
                    | null;
                  button?: {
                    label?: string | null;
                    link?: string | null;
                    variant?: ('primary' | 'secondary') | null;
                  };
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'pricingTable';
          }
      )[]
    | null;
  /**
   * Settings for search engine optimization
   */
  seo?: {
    /**
     * Custom title for search engines. Defaults to page name if empty.
     */
    title?: string | null;
    /**
     * Brief description for search engines.
     */
    description?: string | null;
    /**
     * Image displayed when shared on social media (defaults to global setting if empty).
     */
    image?: (string | null) | Media;
    noIndex?: boolean | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'pages';
        value: string | Page;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  prefix?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  layout?:
    | T
    | {
        cover?:
          | T
          | {
              title?: T;
              subtitle?: T;
              id?: T;
              blockName?: T;
            };
        richText?:
          | T
          | {
              content?: T;
              id?: T;
              blockName?: T;
            };
        image?:
          | T
          | {
              image?: T;
              caption?: T;
              settings?:
                | T
                | {
                    width?: T;
                    alignment?: T;
                    rounded?: T;
                    shadow?: T;
                  };
              id?: T;
              blockName?: T;
            };
        hero?:
          | T
          | {
              background?:
                | T
                | {
                    type?: T;
                    image?: T;
                    video?: T;
                    overlay?: T;
                  };
              layout?:
                | T
                | {
                    contentAlignment?: T;
                    verticalAlignment?: T;
                    contentWidth?: T;
                  };
              content?:
                | T
                | {
                    heading?: T;
                    subheading?: T;
                    buttons?:
                      | T
                      | {
                          label?: T;
                          link?: T;
                          variant?: T;
                          id?: T;
                        };
                  };
              id?: T;
              blockName?: T;
            };
        heroCarousel?:
          | T
          | {
              slides?:
                | T
                | {
                    background?:
                      | T
                      | {
                          type?: T;
                          image?: T;
                          video?: T;
                          overlay?: T;
                        };
                    content?:
                      | T
                      | {
                          heading?: T;
                          subheading?: T;
                          buttons?:
                            | T
                            | {
                                label?: T;
                                link?: T;
                                variant?: T;
                                id?: T;
                              };
                        };
                    id?: T;
                  };
              settings?:
                | T
                | {
                    autoplay?: T;
                    interval?: T;
                    showArrows?: T;
                    showDots?: T;
                    layout?:
                      | T
                      | {
                          contentAlignment?: T;
                          contentWidth?: T;
                        };
                  };
              id?: T;
              blockName?: T;
            };
        cardGrid?:
          | T
          | {
              heading?: T;
              description?: T;
              layout?: T;
              cards?:
                | T
                | {
                    image?: T;
                    title?: T;
                    description?: T;
                    link?:
                      | T
                      | {
                          text?: T;
                          url?: T;
                        };
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        twoColumn?:
          | T
          | {
              layout?:
                | T
                | {
                    contentRatio?: T;
                    verticalAlignment?: T;
                    spacing?: T;
                    reverseOnMobile?: T;
                  };
              leftColumn?:
                | T
                | {
                    contentType?: T;
                    text?:
                      | T
                      | {
                          heading?: T;
                          content?: T;
                          button?:
                            | T
                            | {
                                label?: T;
                                link?: T;
                                variant?: T;
                              };
                        };
                    media?:
                      | T
                      | {
                          type?: T;
                          image?: T;
                          video?: T;
                        };
                  };
              rightColumn?:
                | T
                | {
                    contentType?: T;
                    text?:
                      | T
                      | {
                          heading?: T;
                          content?: T;
                          button?:
                            | T
                            | {
                                label?: T;
                                link?: T;
                                variant?: T;
                              };
                        };
                    media?:
                      | T
                      | {
                          type?: T;
                          image?: T;
                          video?: T;
                        };
                  };
              id?: T;
              blockName?: T;
            };
        pricingTable?:
          | T
          | {
              heading?: T;
              description?: T;
              layout?:
                | T
                | {
                    style?: T;
                    columns?: T;
                    spacing?: T;
                  };
              plans?:
                | T
                | {
                    name?: T;
                    featured?: T;
                    price?:
                      | T
                      | {
                          amount?: T;
                          currency?: T;
                          period?: T;
                        };
                    description?: T;
                    features?:
                      | T
                      | {
                          text?: T;
                          included?: T;
                          id?: T;
                        };
                    button?:
                      | T
                      | {
                          label?: T;
                          link?: T;
                          variant?: T;
                        };
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
      };
  seo?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
        noIndex?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "site-settings".
 */
export interface SiteSetting {
  id: string;
  generalSettings: {
    siteName: string;
    siteDescription?: string | null;
    favicon?: (string | null) | Media;
    /**
     * Used for social media when sharing your site
     */
    ogImage?: (string | null) | Media;
  };
  seoSettings?: {
    /**
     * Appended to all page titles, e.g. " | My Website"
     */
    metaTitleSuffix?: string | null;
    indexingEnabled?: boolean | null;
  };
  socialMedia?: {
    accounts?:
      | {
          platform?: ('facebook' | 'twitter' | 'instagram' | 'linkedin' | 'youtube' | 'tiktok' | 'github') | null;
          url?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "color-settings".
 */
export interface ColorSetting {
  id: string;
  background?: {
    /**
     * The main background color of the site (example: #000000)
     */
    primary?: string | null;
    /**
     * Used for cards, sections, and secondary elements (example: #121212)
     */
    secondary?: string | null;
  };
  text?: {
    /**
     * Main text color throughout the site (example: #FFFFFF)
     */
    primary?: string | null;
    /**
     * Used for less important text, subtitles, and captions (example: #AAAAAA)
     */
    secondary?: string | null;
  };
  accent?: {
    /**
     * Main accent color for buttons, links, and highlights (example: #3B82F6)
     */
    primary?: string | null;
    /**
     * Used for secondary buttons, hover states, and alternative highlights (example: #8B5CF6)
     */
    secondary?: string | null;
  };
  header?: {
    /**
     * Background color or gradient for the site header (example: linear-gradient(to right, #3B82F6, #8B5CF6) or #3B82F6)
     */
    background?: string | null;
    /**
     * Text color for the header navigation (example: #FFFFFF)
     */
    text?: string | null;
  };
  footer?: {
    /**
     * Background color for the site footer (example: #1F2937)
     */
    background?: string | null;
    /**
     * Main text color in the footer (example: #FFFFFF)
     */
    text?: string | null;
    /**
     * Used for less important text in the footer (example: #9CA3AF)
     */
    secondaryText?: string | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header".
 */
export interface Header {
  id: string;
  /**
   * Logo displayed in the header (recommended dimensions: 160x64px)
   */
  logo: string | Media;
  nav: {
    label: string;
    link?: string | null;
    /**
     * Optional badge (e.g. "New", "Hot")
     */
    badge?: string | null;
    /**
     * Color theme for the badge
     */
    badgeColor?: ('primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info') | null;
    /**
     * Add dropdown items (if any)
     */
    submenu?:
      | {
          label: string;
          link: string;
          /**
           * Optional short description under the label
           */
          description?: string | null;
          /**
           * Optional icon name (e.g., "home", "settings")
           */
          icon?: string | null;
          highlight?: boolean | null;
          id?: string | null;
        }[]
      | null;
    id?: string | null;
  }[];
  /**
   * Add up to 2 call-to-action buttons
   */
  buttons?:
    | {
        label: string;
        link: string;
        variant?: ('primary' | 'secondary' | 'text' | 'outline') | null;
        /**
         * Optional icon name to show before text (e.g., "arrow-right")
         */
        icon?: string | null;
        newTab?: boolean | null;
        id?: string | null;
      }[]
    | null;
  layout?: {
    variant?: ('standard' | 'transparent' | 'centered' | 'minimal') | null;
    sticky?: boolean | null;
    containerWidth?: ('standard' | 'wide' | 'narrow' | 'full') | null;
    mobileBreakpoint?: ('sm' | 'md' | 'lg') | null;
  };
  /**
   * Optional bar above the main header for announcements or contact info
   */
  topBar?: {
    enabled?: boolean | null;
    text?: string | null;
    ctaText?: string | null;
    ctaLink?: string | null;
    /**
     * Hex color code (e.g., #FF5500) or use "primary", "secondary"
     */
    backgroundColor?: string | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: string;
  /**
   * Logo displayed in the footer (recommended dimensions: 160x64px)
   */
  logo: string | Media;
  /**
   * Configure up to 3 columns of navigation links
   */
  columns?:
    | {
        title: string;
        links?:
          | {
              label: string;
              link: string;
              newTab?: boolean | null;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  contactInfo?: {
    title?: string | null;
    /**
     * Primary contact email
     */
    email?: string | null;
    phone?: string | null;
    address?: string | null;
  };
  /**
   * Add social media links to the footer
   */
  socialMedia?:
    | {
        platform: 'facebook' | 'twitter' | 'instagram' | 'linkedin' | 'youtube' | 'github' | 'discord' | 'tiktok';
        url: string;
        /**
         * Hex color code for the icon (e.g. #1DA1F2 for Twitter blue)
         */
        color?: string | null;
        id?: string | null;
      }[]
    | null;
  copyrightSettings?: {
    /**
     * Use {year} to insert the current year
     */
    copyrightText?: string | null;
    companyName?: string | null;
    showCurrentYear?: boolean | null;
  };
  layout?: {
    style?: ('standard' | 'minimal' | 'expanded') | null;
    columnsOnMobile?: ('stack' | '2-cols') | null;
    width?: ('standard' | 'wide' | 'narrow') | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "site-settings_select".
 */
export interface SiteSettingsSelect<T extends boolean = true> {
  generalSettings?:
    | T
    | {
        siteName?: T;
        siteDescription?: T;
        favicon?: T;
        ogImage?: T;
      };
  seoSettings?:
    | T
    | {
        metaTitleSuffix?: T;
        indexingEnabled?: T;
      };
  socialMedia?:
    | T
    | {
        accounts?:
          | T
          | {
              platform?: T;
              url?: T;
              id?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "color-settings_select".
 */
export interface ColorSettingsSelect<T extends boolean = true> {
  background?:
    | T
    | {
        primary?: T;
        secondary?: T;
      };
  text?:
    | T
    | {
        primary?: T;
        secondary?: T;
      };
  accent?:
    | T
    | {
        primary?: T;
        secondary?: T;
      };
  header?:
    | T
    | {
        background?: T;
        text?: T;
      };
  footer?:
    | T
    | {
        background?: T;
        text?: T;
        secondaryText?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header_select".
 */
export interface HeaderSelect<T extends boolean = true> {
  logo?: T;
  nav?:
    | T
    | {
        label?: T;
        link?: T;
        badge?: T;
        badgeColor?: T;
        submenu?:
          | T
          | {
              label?: T;
              link?: T;
              description?: T;
              icon?: T;
              highlight?: T;
              id?: T;
            };
        id?: T;
      };
  buttons?:
    | T
    | {
        label?: T;
        link?: T;
        variant?: T;
        icon?: T;
        newTab?: T;
        id?: T;
      };
  layout?:
    | T
    | {
        variant?: T;
        sticky?: T;
        containerWidth?: T;
        mobileBreakpoint?: T;
      };
  topBar?:
    | T
    | {
        enabled?: T;
        text?: T;
        ctaText?: T;
        ctaLink?: T;
        backgroundColor?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  logo?: T;
  columns?:
    | T
    | {
        title?: T;
        links?:
          | T
          | {
              label?: T;
              link?: T;
              newTab?: T;
              id?: T;
            };
        id?: T;
      };
  contactInfo?:
    | T
    | {
        title?: T;
        email?: T;
        phone?: T;
        address?: T;
      };
  socialMedia?:
    | T
    | {
        platform?: T;
        url?: T;
        color?: T;
        id?: T;
      };
  copyrightSettings?:
    | T
    | {
        copyrightText?: T;
        companyName?: T;
        showCurrentYear?: T;
      };
  layout?:
    | T
    | {
        style?: T;
        columnsOnMobile?: T;
        width?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}